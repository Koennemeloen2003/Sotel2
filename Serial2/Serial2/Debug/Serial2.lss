
Serial2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083c  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070d  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  000011d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000106  00000000  00000000  000018af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 80 00 	call	0x100	; 0x100 <main>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <serial_read_nibble>:
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
}

inline byte serial_read_byte()
{
	loop_until_bit_is_set(UCSR0A, RXC0); return UDR0;
  80:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  84:	88 23       	and	r24, r24
  86:	e4 f7       	brge	.-8      	; 0x80 <serial_read_nibble>
  88:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

byte serial_read_nibble()
{
	byte nibble = serial_read_byte();
	
	if ((nibble >= 'A') && (nibble <= 'F'))
  8c:	9f eb       	ldi	r25, 0xBF	; 191
  8e:	98 0f       	add	r25, r24
  90:	96 30       	cpi	r25, 0x06	; 6
  92:	10 f4       	brcc	.+4      	; 0x98 <serial_read_nibble+0x18>
	{
		nibble -= 'A' - 10;
  94:	87 53       	subi	r24, 0x37	; 55
  96:	08 95       	ret
	}
	else if ((nibble >= 'a') && (nibble <= 'f'))
  98:	9f e9       	ldi	r25, 0x9F	; 159
  9a:	98 0f       	add	r25, r24
  9c:	96 30       	cpi	r25, 0x06	; 6
  9e:	10 f4       	brcc	.+4      	; 0xa4 <serial_read_nibble+0x24>
	{
		nibble -= 'a' - 10;
  a0:	87 55       	subi	r24, 0x57	; 87
  a2:	08 95       	ret
	}
	else if ((nibble >= '0') && (nibble <= '9'))
  a4:	80 53       	subi	r24, 0x30	; 48
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	08 f0       	brcs	.+2      	; 0xac <serial_read_nibble+0x2c>
	{
		nibble -= '0';
	}
	else
	{
		nibble = 0;
  aa:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return nibble;
}
  ac:	08 95       	ret

000000ae <shift_out_595>:
		}
	}
}

void shift_out_595(uint8_t data) {
	data = ~data;
  ae:	80 95       	com	r24
	for (int i = 7; i >= 0; i--) {
  b0:	27 e0       	ldi	r18, 0x07	; 7
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	19 c0       	rjmp	.+50     	; 0xe8 <shift_out_595+0x3a>
		// Set DATA bit
		if (data & (1 << i))
  b6:	48 2f       	mov	r20, r24
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	02 2e       	mov	r0, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <shift_out_595+0x14>
  be:	55 95       	asr	r21
  c0:	47 95       	ror	r20
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <shift_out_595+0x10>
  c6:	40 ff       	sbrs	r20, 0
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <shift_out_595+0x24>
		PORTC |= (1 << PC0);   // DATA high
  ca:	98 b1       	in	r25, 0x08	; 8
  cc:	91 60       	ori	r25, 0x01	; 1
  ce:	98 b9       	out	0x08, r25	; 8
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <shift_out_595+0x2a>
		else
		PORTC &= ~(1<<PC0);  // DATA low
  d2:	98 b1       	in	r25, 0x08	; 8
  d4:	9e 7f       	andi	r25, 0xFE	; 254
  d6:	98 b9       	out	0x08, r25	; 8

		// Pulse CLOCK
		PORTC |= (1<<PC1);
  d8:	98 b1       	in	r25, 0x08	; 8
  da:	92 60       	ori	r25, 0x02	; 2
  dc:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<PC1);
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	9d 7f       	andi	r25, 0xFD	; 253
  e2:	98 b9       	out	0x08, r25	; 8
	}
}

void shift_out_595(uint8_t data) {
	data = ~data;
	for (int i = 7; i >= 0; i--) {
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	31 09       	sbc	r19, r1
  e8:	33 23       	and	r19, r19
  ea:	2c f7       	brge	.-54     	; 0xb6 <shift_out_595+0x8>
		PORTC |= (1<<PC1);
		PORTC &= ~(1<<PC1);
	}

	// Pulse LATCH
	PORTC |=(1<<PC2);
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	88 b9       	out	0x08, r24	; 8
	PORTC &=~(1<<PC2);
  f2:	88 b1       	in	r24, 0x08	; 8
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<PC0);
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	88 b9       	out	0x08, r24	; 8
  fe:	08 95       	ret

00000100 <main>:


int main(void)
{

	UBRR0L = 0X10;
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = 0;
 106:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0); // receive & transmit enabled
 10a:	88 e1       	ldi	r24, 0x18	; 24
 10c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	UCSR0C = 3 << UCSZ00; // 8 data-bits, 1 stop-bit, no parity
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	DDRB = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 11a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0;
 11c:	1a b8       	out	0x0a, r1	; 10
	
	PORTB =0;
 11e:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
 120:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 122:	1b b8       	out	0x0b, r1	; 11
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
}

inline byte serial_read_byte()
{
	loop_until_bit_is_set(UCSR0A, RXC0); return UDR0;
 124:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 128:	88 23       	and	r24, r24
 12a:	e4 f7       	brge	.-8      	; 0x124 <main+0x24>
 12c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	while (1)
	{
		byte input = serial_read_byte();
		
		if (input == 'B')
 130:	82 34       	cpi	r24, 0x42	; 66
 132:	99 f4       	brne	.+38     	; 0x15a <main+0x5a>
		{
			byte hi = serial_read_nibble();
 134:	0e 94 40 00 	call	0x80	; 0x80 <serial_read_nibble>
 138:	c8 2f       	mov	r28, r24
			byte lo = serial_read_nibble();
 13a:	0e 94 40 00 	call	0x80	; 0x80 <serial_read_nibble>
			
			PORTB = (hi << 4) | lo;
 13e:	40 e1       	ldi	r20, 0x10	; 16
 140:	c4 9f       	mul	r28, r20
 142:	90 01       	movw	r18, r0
 144:	11 24       	eor	r1, r1
 146:	82 2b       	or	r24, r18
 148:	85 b9       	out	0x05, r24	; 5

typedef unsigned char byte;

inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 14a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14e:	85 ff       	sbrs	r24, 5
 150:	fc cf       	rjmp	.-8      	; 0x14a <main+0x4a>
 152:	8e e2       	ldi	r24, 0x2E	; 46
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 158:	e5 cf       	rjmp	.-54     	; 0x124 <main+0x24>
			
			PORTB = (hi << 4) | lo;
			
			serial_write_byte('.');
		}
		else if (input == 'A'){
 15a:	81 34       	cpi	r24, 0x41	; 65
 15c:	b1 f4       	brne	.+44     	; 0x18a <main+0x8a>
			byte hi = serial_read_nibble();
 15e:	0e 94 40 00 	call	0x80	; 0x80 <serial_read_nibble>
 162:	c8 2f       	mov	r28, r24
			byte lo = serial_read_nibble();
 164:	0e 94 40 00 	call	0x80	; 0x80 <serial_read_nibble>
			
			shift_out_595((hi << 4) | lo);
 168:	50 e1       	ldi	r21, 0x10	; 16
 16a:	c5 9f       	mul	r28, r21
 16c:	90 01       	movw	r18, r0
 16e:	11 24       	eor	r1, r1
 170:	a9 01       	movw	r20, r18
 172:	48 2b       	or	r20, r24
 174:	ca 01       	movw	r24, r20
 176:	0e 94 57 00 	call	0xae	; 0xae <shift_out_595>

typedef unsigned char byte;

inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 17a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 17e:	85 ff       	sbrs	r24, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <main+0x7a>
 182:	81 e2       	ldi	r24, 0x21	; 33
 184:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 188:	cd cf       	rjmp	.-102    	; 0x124 <main+0x24>
 18a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18e:	85 ff       	sbrs	r24, 5
 190:	fc cf       	rjmp	.-8      	; 0x18a <main+0x8a>
 192:	8f e3       	ldi	r24, 0x3F	; 63
 194:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 198:	c5 cf       	rjmp	.-118    	; 0x124 <main+0x24>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
