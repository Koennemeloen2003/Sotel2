
Serial2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000004c0  00000554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800146  00800146  0000059a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eef  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b4  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000559  00000000  00000000  00001cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00002254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000428  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000517  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  9e:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <serial_read_nibble>:
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
}

inline byte serial_read_byte()
{
	loop_until_bit_is_set(UCSR0A, RXC0); return UDR0;
  a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	88 23       	and	r24, r24
  ac:	e4 f7       	brge	.-8      	; 0xa6 <serial_read_nibble>
  ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

byte serial_read_nibble()
{
	byte nibble = serial_read_byte();
	
	if ((nibble >= 'A') && (nibble <= 'F'))
  b2:	9f eb       	ldi	r25, 0xBF	; 191
  b4:	98 0f       	add	r25, r24
  b6:	96 30       	cpi	r25, 0x06	; 6
  b8:	10 f4       	brcc	.+4      	; 0xbe <serial_read_nibble+0x18>
	{
		nibble -= 'A' - 10;
  ba:	87 53       	subi	r24, 0x37	; 55
  bc:	08 95       	ret
	}
	else if ((nibble >= 'a') && (nibble <= 'f'))
  be:	9f e9       	ldi	r25, 0x9F	; 159
  c0:	98 0f       	add	r25, r24
  c2:	96 30       	cpi	r25, 0x06	; 6
  c4:	10 f4       	brcc	.+4      	; 0xca <serial_read_nibble+0x24>
	{
		nibble -= 'a' - 10;
  c6:	87 55       	subi	r24, 0x57	; 87
  c8:	08 95       	ret
	}
	else if ((nibble >= '0') && (nibble <= '9'))
  ca:	80 53       	subi	r24, 0x30	; 48
  cc:	8a 30       	cpi	r24, 0x0A	; 10
  ce:	08 f0       	brcs	.+2      	; 0xd2 <serial_read_nibble+0x2c>
	{
		nibble -= '0';
	}
	else
	{
		nibble = 0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return nibble;
}
  d2:	08 95       	ret

000000d4 <init_Serial>:


void init_Serial()
{
	UBRR0L = 0X10;
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = 0;
  da:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	
	UCSR0B = (1 << RXEN0)|(1 << TXEN0); // receive & transmit enabled
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	UCSR0C = 3 << UCSZ00; // 8 data-bits, 1 stop-bit, no parity
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ea:	08 95       	ret

000000ec <init_ports>:
	
}

void init_ports()
{
	DDRB = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
  f0:	87 b9       	out	0x07, r24	; 7
	DDRD =0;
  f2:	1a b8       	out	0x0a, r1	; 10
	
	PORTB =0;
  f4:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
  f6:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
  f8:	1b b8       	out	0x0b, r1	; 11
	DDRB |= (1 << PB1); // D9 = output
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	84 b9       	out	0x04, r24	; 4
 100:	08 95       	ret

00000102 <play_tone>:
	
}

void play_tone(uint16_t freq) {
	if (freq == 0) {
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	41 f4       	brne	.+16     	; 0x116 <play_tone+0x14>
		// Stop PWM
		TCCR1A = 0;
 106:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = 0;
 10a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		PORTB &= ~(1 << PB1); // Zet D9 laag
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	85 b9       	out	0x05, r24	; 5
		return;
 114:	08 95       	ret
	}

	uint16_t top = (F_CPU / (2UL * 8UL * freq)) - 1;  // Prescaler 8
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	aa 1f       	adc	r26, r26
 120:	bb 1f       	adc	r27, r27
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	aa 1f       	adc	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	9c 01       	movw	r18, r24
 12c:	ad 01       	movw	r20, r26
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	44 1f       	adc	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	44 1f       	adc	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	74 e2       	ldi	r23, 0x24	; 36
 142:	84 ef       	ldi	r24, 0xF4	; 244
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 3c 02 	call	0x478	; 0x478 <__udivmodsi4>
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	31 09       	sbc	r19, r1
	ICR1 = top;
 14e:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 152:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = top / 2;  // 50% duty cycle
 156:	36 95       	lsr	r19
 158:	27 95       	ror	r18
 15a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// Fast PWM, TOP = ICR1
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 162:	82 e8       	ldi	r24, 0x82	; 130
 164:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler = 8
 168:	8a e1       	ldi	r24, 0x1A	; 26
 16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 16e:	08 95       	ret

00000170 <liedje1>:
	0x80
	};

void liedje1()
{
	play_tone(3);
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f e7       	ldi	r18, 0x7F	; 127
 17a:	87 e2       	ldi	r24, 0x27	; 39
 17c:	98 e0       	ldi	r25, 0x08	; 8
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <liedje1+0xe>
 186:	00 c0       	rjmp	.+0      	; 0x188 <liedje1+0x18>
 188:	00 00       	nop
	_delay_ms(167);
	play_tone(0);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
	play_tone(3);
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 19a:	2f e7       	ldi	r18, 0x7F	; 127
 19c:	87 e2       	ldi	r24, 0x27	; 39
 19e:	98 e0       	ldi	r25, 0x08	; 8
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <liedje1+0x30>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <liedje1+0x3a>
 1aa:	00 00       	nop
	_delay_ms(167);
	play_tone(0);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 1b4:	2f e7       	ldi	r18, 0x7F	; 127
 1b6:	87 e2       	ldi	r24, 0x27	; 39
 1b8:	98 e0       	ldi	r25, 0x08	; 8
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <liedje1+0x4a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <liedje1+0x54>
 1c4:	00 00       	nop
	_delay_ms(167);
	play_tone(3);
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 1ce:	2f e7       	ldi	r18, 0x7F	; 127
 1d0:	87 e2       	ldi	r24, 0x27	; 39
 1d2:	98 e0       	ldi	r25, 0x08	; 8
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <liedje1+0x64>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <liedje1+0x6e>
 1de:	00 00       	nop
	_delay_ms(167);
	play_tone(0);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
	play_tone(1);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 1f0:	2f e7       	ldi	r18, 0x7F	; 127
 1f2:	87 e2       	ldi	r24, 0x27	; 39
 1f4:	98 e0       	ldi	r25, 0x08	; 8
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <liedje1+0x86>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <liedje1+0x90>
 200:	00 00       	nop
	_delay_ms(167);
	play_tone(0);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
	play_tone(3);
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	8e e4       	ldi	r24, 0x4E	; 78
 216:	90 e1       	ldi	r25, 0x10	; 16
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <liedje1+0xa8>
 220:	00 c0       	rjmp	.+0      	; 0x222 <liedje1+0xb2>
 222:	00 00       	nop
	_delay_ms(334);
	play_tone(0);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
	play_tone(5);
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	8e e4       	ldi	r24, 0x4E	; 78
 238:	90 e1       	ldi	r25, 0x10	; 16
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <liedje1+0xca>
 242:	00 c0       	rjmp	.+0      	; 0x244 <liedje1+0xd4>
 244:	00 00       	nop
	_delay_ms(334);
	play_tone(0);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	8e e4       	ldi	r24, 0x4E	; 78
 252:	90 e1       	ldi	r25, 0x10	; 16
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <liedje1+0xe4>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <liedje1+0xee>
 25e:	00 00       	nop
 260:	08 95       	ret

00000262 <shift_out_595>:
		}
	}
}

void shift_out_595(uint8_t data) {
	data = ~data;
 262:	80 95       	com	r24
	for (int i = 7; i >= 0; i--) {
 264:	27 e0       	ldi	r18, 0x07	; 7
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	19 c0       	rjmp	.+50     	; 0x29c <shift_out_595+0x3a>
		// Set DATA bit
		if (data & (1 << i))
 26a:	48 2f       	mov	r20, r24
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	02 2e       	mov	r0, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <shift_out_595+0x14>
 272:	55 95       	asr	r21
 274:	47 95       	ror	r20
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <shift_out_595+0x10>
 27a:	40 ff       	sbrs	r20, 0
 27c:	04 c0       	rjmp	.+8      	; 0x286 <shift_out_595+0x24>
		PORTC |= (1 << PC0);   // DATA high
 27e:	98 b1       	in	r25, 0x08	; 8
 280:	91 60       	ori	r25, 0x01	; 1
 282:	98 b9       	out	0x08, r25	; 8
 284:	03 c0       	rjmp	.+6      	; 0x28c <shift_out_595+0x2a>
		else
		PORTC &= ~(1<<PC0);  // DATA low
 286:	98 b1       	in	r25, 0x08	; 8
 288:	9e 7f       	andi	r25, 0xFE	; 254
 28a:	98 b9       	out	0x08, r25	; 8

		// Pulse CLOCK
		PORTC |= (1<<PC1);
 28c:	98 b1       	in	r25, 0x08	; 8
 28e:	92 60       	ori	r25, 0x02	; 2
 290:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<PC1);
 292:	98 b1       	in	r25, 0x08	; 8
 294:	9d 7f       	andi	r25, 0xFD	; 253
 296:	98 b9       	out	0x08, r25	; 8
	}
}

void shift_out_595(uint8_t data) {
	data = ~data;
	for (int i = 7; i >= 0; i--) {
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	31 09       	sbc	r19, r1
 29c:	33 23       	and	r19, r19
 29e:	2c f7       	brge	.-54     	; 0x26a <shift_out_595+0x8>
		PORTC |= (1<<PC1);
		PORTC &= ~(1<<PC1);
	}

	// Pulse LATCH
	PORTC |=(1<<PC2);
 2a0:	88 b1       	in	r24, 0x08	; 8
 2a2:	84 60       	ori	r24, 0x04	; 4
 2a4:	88 b9       	out	0x08, r24	; 8
	PORTC &=~(1<<PC2);
 2a6:	88 b1       	in	r24, 0x08	; 8
 2a8:	8b 7f       	andi	r24, 0xFB	; 251
 2aa:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<PC0);
 2ac:	88 b1       	in	r24, 0x08	; 8
 2ae:	8e 7f       	andi	r24, 0xFE	; 254
 2b0:	88 b9       	out	0x08, r24	; 8
 2b2:	08 95       	ret

000002b4 <main>:
	_delay_ms(334);
}

int main(void)
{
	init_Serial();
 2b4:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_Serial>
	init_ports();
 2b8:	0e 94 76 00 	call	0xec	; 0xec <init_ports>


	
	while (1)
	{
		if((UCSR0A & (1<<RXC0))){
 2bc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2c0:	88 23       	and	r24, r24
 2c2:	e4 f7       	brge	.-8      	; 0x2bc <main+0x8>
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
}

inline byte serial_read_byte()
{
	loop_until_bit_is_set(UCSR0A, RXC0); return UDR0;
 2c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2c8:	88 23       	and	r24, r24
 2ca:	e4 f7       	brge	.-8      	; 0x2c4 <main+0x10>
 2cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (1)
	{
		if((UCSR0A & (1<<RXC0))){
		byte input = serial_read_byte();
		
		if (input == 'B')
 2d0:	82 34       	cpi	r24, 0x42	; 66
 2d2:	99 f4       	brne	.+38     	; 0x2fa <main+0x46>
		{	
			byte hi = serial_read_nibble();
 2d4:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
 2d8:	c8 2f       	mov	r28, r24
			byte lo = serial_read_nibble();
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
			
			PORTB = (hi << 4) | lo;
 2de:	40 e1       	ldi	r20, 0x10	; 16
 2e0:	c4 9f       	mul	r28, r20
 2e2:	90 01       	movw	r18, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	82 2b       	or	r24, r18
 2e8:	85 b9       	out	0x05, r24	; 5



inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 2ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2ee:	85 ff       	sbrs	r24, 5
 2f0:	fc cf       	rjmp	.-8      	; 0x2ea <main+0x36>
 2f2:	8e e2       	ldi	r24, 0x2E	; 46
 2f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2f8:	e1 cf       	rjmp	.-62     	; 0x2bc <main+0x8>
			
			PORTB = (hi << 4) | lo;
			
			serial_write_byte('.');
		}
		else if (input == 'D'){
 2fa:	84 34       	cpi	r24, 0x44	; 68
 2fc:	b1 f4       	brne	.+44     	; 0x32a <main+0x76>
			byte lo = serial_read_nibble();
 2fe:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
			display =getallen[lo];
 302:	e8 2f       	mov	r30, r24
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	e0 5f       	subi	r30, 0xF0	; 240
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 81       	ld	r24, Z
 310:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <display>
			shift_out_595(display);
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 31 01 	call	0x262	; 0x262 <shift_out_595>



inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 31a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 31e:	85 ff       	sbrs	r24, 5
 320:	fc cf       	rjmp	.-8      	; 0x31a <main+0x66>
 322:	81 e2       	ldi	r24, 0x21	; 33
 324:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 328:	c9 cf       	rjmp	.-110    	; 0x2bc <main+0x8>
			byte lo = serial_read_nibble();
			display =getallen[lo];
			shift_out_595(display);
			serial_write_byte('!');
		}
		else if (input == 'S'){
 32a:	83 35       	cpi	r24, 0x53	; 83
 32c:	e1 f4       	brne	.+56     	; 0x366 <main+0xb2>
			byte lo = serial_read_nibble();
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
			display = display & ~bitjes[lo-1];
 332:	e8 2f       	mov	r30, r24
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e0 50       	subi	r30, 0x00	; 0
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	80 81       	ld	r24, Z
 342:	98 2f       	mov	r25, r24
 344:	90 95       	com	r25
 346:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <display>
 34a:	89 23       	and	r24, r25
 34c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <display>
			shift_out_595(display);		
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 31 01 	call	0x262	; 0x262 <shift_out_595>



inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 356:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 35a:	85 ff       	sbrs	r24, 5
 35c:	fc cf       	rjmp	.-8      	; 0x356 <main+0xa2>
 35e:	81 e2       	ldi	r24, 0x21	; 33
 360:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 364:	ab cf       	rjmp	.-170    	; 0x2bc <main+0x8>
			byte lo = serial_read_nibble();
			display = display & ~bitjes[lo-1];
			shift_out_595(display);		
			serial_write_byte('!');
		}
		else if (input == 'H'){
 366:	88 34       	cpi	r24, 0x48	; 72
 368:	d1 f4       	brne	.+52     	; 0x39e <main+0xea>
			byte lo = serial_read_nibble();
 36a:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
			display = display | bitjes[lo-1];
 36e:	e8 2f       	mov	r30, r24
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	e0 50       	subi	r30, 0x00	; 0
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	80 81       	ld	r24, Z
 37e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <display>
 382:	89 2b       	or	r24, r25
 384:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <display>
			shift_out_595(display);
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 31 01 	call	0x262	; 0x262 <shift_out_595>



inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 38e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 392:	85 ff       	sbrs	r24, 5
 394:	fc cf       	rjmp	.-8      	; 0x38e <main+0xda>
 396:	8c e7       	ldi	r24, 0x7C	; 124
 398:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 39c:	8f cf       	rjmp	.-226    	; 0x2bc <main+0x8>
			byte lo = serial_read_nibble();
			display = display | bitjes[lo-1];
			shift_out_595(display);
			serial_write_byte('|');
		}
		else if (input=='P'){
 39e:	80 35       	cpi	r24, 0x50	; 80
 3a0:	61 f5       	brne	.+88     	; 0x3fa <main+0x146>
			byte hi = serial_read_nibble();
 3a2:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
 3a6:	d8 2f       	mov	r29, r24
			byte mid = serial_read_nibble();
 3a8:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
 3ac:	c8 2f       	mov	r28, r24
			byte lo = serial_read_nibble();
 3ae:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
			uint16_t freq =(hi << 8) |(mid << 4) | lo;
 3b2:	2d 2f       	mov	r18, r29
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	52 2f       	mov	r21, r18
 3b8:	44 27       	eor	r20, r20
 3ba:	90 e1       	ldi	r25, 0x10	; 16
 3bc:	c9 9f       	mul	r28, r25
 3be:	90 01       	movw	r18, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	24 2b       	or	r18, r20
 3c4:	35 2b       	or	r19, r21
			play_tone(freq);
 3c6:	a9 01       	movw	r20, r18
 3c8:	48 2b       	or	r20, r24
 3ca:	ca 01       	movw	r24, r20
 3cc:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 3d0:	5f ef       	ldi	r21, 0xFF	; 255
 3d2:	85 ea       	ldi	r24, 0xA5	; 165
 3d4:	9e e0       	ldi	r25, 0x0E	; 14
 3d6:	51 50       	subi	r21, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x122>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x12c>
 3e0:	00 00       	nop
			_delay_ms(300);         // Laat toon even horen
			play_tone(0);           // Stop toon
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>



inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 3ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3ee:	85 ff       	sbrs	r24, 5
 3f0:	fc cf       	rjmp	.-8      	; 0x3ea <main+0x136>
 3f2:	8c e7       	ldi	r24, 0x7C	; 124
 3f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3f8:	61 cf       	rjmp	.-318    	; 0x2bc <main+0x8>
			_delay_ms(300);         // Laat toon even horen
			play_tone(0);           // Stop toon

			serial_write_byte('|');
		}
		else if (input=='O'){
 3fa:	8f 34       	cpi	r24, 0x4F	; 79
 3fc:	09 f5       	brne	.+66     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			byte lo = serial_read_nibble();
 3fe:	0e 94 53 00 	call	0xa6	; 0xa6 <serial_read_nibble>
			play_tone(toneFreqs[lo]);
 402:	e8 2f       	mov	r30, r24
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	e0 5d       	subi	r30, 0xD0	; 208
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	80 81       	ld	r24, Z
 410:	91 81       	ldd	r25, Z+1	; 0x01
 412:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	45 ea       	ldi	r20, 0xA5	; 165
 41a:	5e e0       	ldi	r21, 0x0E	; 14
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	40 40       	sbci	r20, 0x00	; 0
 420:	50 40       	sbci	r21, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 426:	00 00       	nop
			_delay_ms(300);         // Laat toon even horen
			play_tone(0);           // Stop toon
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 81 00 	call	0x102	; 0x102 <play_tone>



inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 430:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 434:	85 ff       	sbrs	r24, 5
 436:	fc cf       	rjmp	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	8c e7       	ldi	r24, 0x7C	; 124
 43a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 43e:	3e cf       	rjmp	.-388    	; 0x2bc <main+0x8>
			_delay_ms(300);         // Laat toon even horen
			play_tone(0);           // Stop toon

			serial_write_byte('|');
		}
		else if (input=='M'){
 440:	8d 34       	cpi	r24, 0x4D	; 77
 442:	91 f4       	brne	.+36     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
}

inline byte serial_read_byte()
{
	loop_until_bit_is_set(UCSR0A, RXC0); return UDR0;
 444:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 448:	88 23       	and	r24, r24
 44a:	e4 f7       	brge	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

			serial_write_byte('|');
		}
		else if (input=='M'){
			input = serial_read_byte();
			if (input =='1'){
 450:	81 33       	cpi	r24, 0x31	; 49
 452:	11 f4       	brne	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
				liedje1();
 454:	0e 94 b8 00 	call	0x170	; 0x170 <liedje1>



inline void serial_write_byte(byte c)
{
	loop_until_bit_is_set(UCSR0A, UDRE0); UDR0 = c;
 458:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 45c:	85 ff       	sbrs	r24, 5
 45e:	fc cf       	rjmp	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	8c e7       	ldi	r24, 0x7C	; 124
 462:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 466:	2a cf       	rjmp	.-428    	; 0x2bc <main+0x8>
 468:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 46c:	85 ff       	sbrs	r24, 5
 46e:	fc cf       	rjmp	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	8f e3       	ldi	r24, 0x3F	; 63
 472:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 476:	22 cf       	rjmp	.-444    	; 0x2bc <main+0x8>

00000478 <__udivmodsi4>:
 478:	a1 e2       	ldi	r26, 0x21	; 33
 47a:	1a 2e       	mov	r1, r26
 47c:	aa 1b       	sub	r26, r26
 47e:	bb 1b       	sub	r27, r27
 480:	fd 01       	movw	r30, r26
 482:	0d c0       	rjmp	.+26     	; 0x49e <__udivmodsi4_ep>

00000484 <__udivmodsi4_loop>:
 484:	aa 1f       	adc	r26, r26
 486:	bb 1f       	adc	r27, r27
 488:	ee 1f       	adc	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	a2 17       	cp	r26, r18
 48e:	b3 07       	cpc	r27, r19
 490:	e4 07       	cpc	r30, r20
 492:	f5 07       	cpc	r31, r21
 494:	20 f0       	brcs	.+8      	; 0x49e <__udivmodsi4_ep>
 496:	a2 1b       	sub	r26, r18
 498:	b3 0b       	sbc	r27, r19
 49a:	e4 0b       	sbc	r30, r20
 49c:	f5 0b       	sbc	r31, r21

0000049e <__udivmodsi4_ep>:
 49e:	66 1f       	adc	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	1a 94       	dec	r1
 4a8:	69 f7       	brne	.-38     	; 0x484 <__udivmodsi4_loop>
 4aa:	60 95       	com	r22
 4ac:	70 95       	com	r23
 4ae:	80 95       	com	r24
 4b0:	90 95       	com	r25
 4b2:	9b 01       	movw	r18, r22
 4b4:	ac 01       	movw	r20, r24
 4b6:	bd 01       	movw	r22, r26
 4b8:	cf 01       	movw	r24, r30
 4ba:	08 95       	ret

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
